main (integer(kind=4) argc, character(kind=1) * * argv)
{
  integer(kind=4) D.1619;
  static integer(kind=4) options.12[8] = {68, 511, 0, 0, 0, 1, 0, 1};

  _gfortran_set_args (argc, argv);
  _gfortran_set_options (8, &options.12[0]);
  p ();
  D.1619 = 0;
  return D.1619;
}


p ()
{

}


f (real(kind=4)[0:D.1602] * restrict sotr, real(kind=4)[0:D.1605] * restrict sobs, real(kind=4)[0:] * restrict sod_t, real(kind=4)[0:D.1608] * restrict zsmu0_flux, integer(kind=4) & restrict nproma, integer(kind=4) & restrict ke, integer(kind=4) & restrict ipend)
{
  integer(kind=4) D.1621;
  bit_size_type size.13;
  <unnamed-unsigned:64> size.14;
  integer(kind=4) D.1624;
  bit_size_type size.15;
  <unnamed-unsigned:64> size.16;
  integer(kind=4) D.1627;
  integer(kind=4) D.1628;
  integer(kind=4) D.1629;
  bit_size_type size.17;
  <unnamed-unsigned:64> size.18;
  integer(kind=8) D.1635;
  integer(kind=8) D.1636;
  real(kind=4) D.1637;
  logical(kind=4) D.1638;
  integer(kind=8) D.1641;
  integer(kind=8) D.1642;
  integer(kind=4) D.1643;
  integer(kind=8) D.1644;
  integer(kind=8) D.1645;
  real(kind=4) D.1646;
  integer(kind=4) ip;
  integer(kind=8) ubound.0;
  integer(kind=8) size.1;
  integer(kind=8) ubound.2;
  integer(kind=8) ubound.3;
  integer(kind=8) stride.4;
  integer(kind=8) offset.5;
  integer(kind=8) size.6;
  integer(kind=8) ubound.7;
  integer(kind=8) size.8;
  integer(kind=8) D.1602;
  bit_size_type D.1603;
  <unnamed-unsigned:64> D.1604;
  integer(kind=8) D.1605;
  bit_size_type D.1606;
  <unnamed-unsigned:64> D.1607;
  integer(kind=8) D.1608;
  bit_size_type D.1609;
  <unnamed-unsigned:64> D.1610;

  D.1621 = *nproma;
  ubound.7 = (integer(kind=8)) D.1621;
  size.8 = ubound.7;
  size.8 = MAX_EXPR <size.8, 0>;
  D.1608 = size.8 + -1;
  size.13 = (bit_size_type) size.8;
  D.1609 = size.13 * 32;
  size.14 = (<unnamed-unsigned:64>) size.8;
  D.1610 = size.14 * 4;
  D.1624 = *nproma;
  ubound.0 = (integer(kind=8)) D.1624;
  size.1 = ubound.0;
  size.1 = MAX_EXPR <size.1, 0>;
  D.1605 = size.1 + -1;
  size.15 = (bit_size_type) size.1;
  D.1606 = size.15 * 32;
  size.16 = (<unnamed-unsigned:64>) size.1;
  D.1607 = size.16 * 4;
  D.1627 = *nproma;
  ubound.2 = (integer(kind=8)) D.1627;
  stride.4 = ubound.2;
  stride.4 = MAX_EXPR <stride.4, 0>;
  D.1628 = *ke;
  D.1629 = D.1628 + 1;
  ubound.3 = (integer(kind=8)) D.1629;
  size.6 = stride.4 * ubound.3;
  size.6 = MAX_EXPR <size.6, 0>;
  D.1602 = size.6 + -1;
  size.17 = (bit_size_type) size.6;
  D.1603 = size.17 * 32;
  size.18 = (<unnamed-unsigned:64>) size.6;
  D.1604 = size.18 * 4;
  offset.5 = ~stride.4;
  {
    integer(kind=4) D.1594;

    D.1594 = *ipend;
    ip = 1;
    if (ip <= D.1594) goto <D.1632>; else goto <D.1633>;
    <D.1632>:
    <D.1634>:
    {
      logical(kind=4) D.1601;

      {
        integer(kind=8) inc.9;

        D.1635 = (integer(kind=8)) ip;
        D.1636 = _gfortran_polly_array_index_1 (-1, 1, D.1635);
        D.1637 = *zsmu0_flux[D.1636];
        D.1638 = D.1637 > 1.0e+1;
        if (D.1638 != 0) goto <D.1639>; else goto <D.1640>;
        <D.1639>:
        {
          integer(kind=8) inc.11;
          integer(kind=8) inc.10;

          D.1641 = (integer(kind=8)) ip;
          D.1642 = _gfortran_polly_array_index_1 (-1, 1, D.1641);
          D.1643 = *ke;
          D.1644 = (integer(kind=8)) D.1643;
          D.1645 = _gfortran_polly_array_index_2 (offset.5, stride.4, 1, D.1644, 1);
          D.1646 = *sotr[D.1645];
          *sobs[D.1642] = D.1646;
        }
        goto <D.1647>;
        <D.1640>:
        <D.1647>:
      }
      L.3:
      L.1:
      D.1601 = ip == D.1594;
      ip = ip + 1;
      if (D.1601 != 0) goto L.2; else goto <D.1648>;
      <D.1648>:
    }
    goto <D.1634>;
    <D.1633>:
    L.2:
  }
}


