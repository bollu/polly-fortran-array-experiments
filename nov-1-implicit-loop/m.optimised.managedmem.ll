; ModuleID = 'm.optimised.ll'
source_filename = "m.bc"
target datalayout = "e-p:64:64:64-S128-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f16:16:16-f32:32:32-f64:64:64-f128:128:128-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.ident\09\22GCC: (GNU) 4.6.4 LLVM: 3.3.1\22"

%"struct.array2_real(kind=4)" = type { i8*, i64, i64, [2 x %struct.descriptor_dimension] }
%struct.descriptor_dimension = type { i64, i64, i64 }
%"struct.array1_real(kind=4)" = type { i8*, i64, i64, [1 x %struct.descriptor_dimension] }
%struct.__st_parameter_dt = type { %struct.__st_parameter_common, i64, i64*, i64*, i8*, i8*, i32, i32, i8*, i8*, i32, i32, i8*, [256 x i8], i32*, i64, i8*, i32, i32, i8*, i8*, i32, i32, i8*, i8*, i32, i32, i8*, i8*, i32, [4 x i8] }
%struct.__st_parameter_common = type { i32, i32, i8*, i32, i32, i8*, i32* }

@__m_MOD_arr2 = global %"struct.array2_real(kind=4)" zeroinitializer, align 32
@__m_MOD_arr1 = global %"struct.array1_real(kind=4)" zeroinitializer, align 32
@.cst = private constant [67 x i8] c"Integer overflow when calculating the amount of memory to allocate\00", align 64
@.cst1 = private constant [37 x i8] c"Allocation would exceed memory limit\00", align 64
@.cst2 = private constant [25 x i8] c"At line 24 of file m.f90\00", align 8
@.cst3 = private constant [55 x i8] c"Attempting to allocate already allocated variable '%s'\00", align 64
@.cst4 = private constant [5 x i8] c"arr1\00", align 8
@.cst5 = private constant [25 x i8] c"At line 25 of file m.f90\00", align 8
@.cst6 = private constant [5 x i8] c"arr2\00", align 8
@.cst7 = private constant [6 x i8] c"m.f90\00", align 8
@.cst8 = private constant [5 x i8] c"arr1:", align 8
@.cst9 = private constant [5 x i8] c"arr2:", align 8
@.cst10 = private constant [17 x i8] c"===calling f()===", align 8
@0 = internal constant i32 0
@1 = internal constant i32 0
@options.16.1624 = internal constant [8 x i32] [i32 68, i32 511, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1], align 32
@FUNC___m_MOD_f_SCOP_0_KERNEL_0 = private unnamed_addr constant [8502 x i8] c"//\0A// Generated by LLVM NVPTX Back-End\0A//\0A\0A.version 5.0\0A.target sm_30\0A.address_size 64\0A\0A\09// .globl\09FUNC___m_MOD_f_SCOP_0_KERNEL_0\0A\0A.visible .entry FUNC___m_MOD_f_SCOP_0_KERNEL_0(\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_0,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_1,\0A\09.param .u32 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_2,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_3,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_4,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_5,\0A\09.param .u32 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_6,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_7,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_8,\0A\09.param .u64 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_9,\0A\09.param .u32 FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_10\0A)\0A.maxntid 32, 1, 1\0A{\0A\09.reg .pred \09%p<10>;\0A\09.reg .b32 \09%r<8>;\0A\09.reg .b64 \09%rd<74>;\0A\0A\09ld.param.u64 \09%rd35, [FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_5];\0A\09ld.param.u64 \09%rd34, [FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_4];\0A\09ld.param.u64 \09%rd33, [FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_3];\0A\09ld.param.u64 \09%rd32, [FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_1];\0A\09ld.param.u64 \09%rd31, [FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_0];\0A\09mov.u32 \09%r1, %ctaid.x;\0A\09mov.u32 \09%r2, %tid.x;\0A\09cvt.u64.u32 \09%rd1, %r2;\0A\09mul.wide.u32 \09%rd2, %r1, 32;\0A\09ld.param.s32 \09%rd3, [FUNC___m_MOD_f_SCOP_0_KERNEL_0_param_2];\0A\09add.s64 \09%rd37, %rd3, -1;\0A\09sub.s64 \09%rd38, %rd37, %rd2;\0A\09shr.u64 \09%rd39, %rd38, 20;\0A\09add.s64 \09%rd4, %rd39, 1;\0A\09and.b64  \09%rd5, %rd4, 3;\0A\09setp.lt.u64 \09%p1, %rd38, 3145728;\0A\09@%p1 bra \09LBB0_1;\0A\09bra.uni \09LBB0_8;\0ALBB0_1:\0A\09mov.u64 \09%rd65, 0;\0A\09setp.eq.s64 \09%p7, %rd5, 0;\0A\09@%p7 bra \09LBB0_7;\0A\09bra.uni \09LBB0_3;\0ALBB0_8:\0A\09sub.s64 \09%rd65, %rd4, %rd5;\0A\09add.s64 \09%rd41, %rd2, %rd1;\0A\09add.s64 \09%rd72, %rd41, 3145728;\0A\09add.s64 \09%rd42, %rd34, %rd33;\0A\09add.s64 \09%rd43, %rd42, %rd2;\0A\09add.s64 \09%rd44, %rd43, %rd1;\0A\09shl.b64 \09%rd45, %rd44, 2;\0A\09add.s64 \09%rd46, %rd32, %rd45;\0A\09add.s64 \09%rd71, %rd46, 8388608;\0A\09add.s64 \09%rd47, %rd35, %rd2;\0A\09add.s64 \09%rd48, %rd47, %rd1;\0A\09shl.b64 \09%rd49, %rd48, 2;\0A\09add.s64 \09%rd50, %rd31, %rd49;\0A\09add.s64 \09%rd70, %rd50, 8388608;\0A\09mov.u64 \09%rd73, 0;\0A\09bra.uni \09LBB0_9;\0ALBB0_17:\0A\09ld.global.u32 \09%r3, [%rd70+-8388608];\0A\09st.global.u32 \09[%rd71+-8388608], %r3;\0A\09add.s64 \09%rd52, %rd72, -2097152;\0A\09setp.lt.s64 \09%p3, %rd52, %rd3;\0A\09@%p3 bra \09LBB0_11;\0A\09bra.uni \09LBB0_12;\0ALBB0_11:\0A\09ld.global.u32 \09%r4, [%rd70+-4194304];\0A\09st.global.u32 \09[%rd71+-4194304], %r4;\0A\09add.s64 \09%rd53, %rd72, -1048576;\0A\09setp.ge.s64 \09%p4, %rd53, %rd3;\0A\09@%p4 bra \09LBB0_14;\0ALBB0_13:\0A\09ld.global.u32 \09%r5, [%rd70];\0A\09st.global.u32 \09[%rd71], %r5;\0A\09setp.ge.s64 \09%p5, %rd72, %rd3;\0A\09@%p5 bra \09LBB0_16;\0A\09bra.uni \09LBB0_15;\0ALBB0_9:\0A\09add.s64 \09%rd51, %rd72, -3145728;\0A\09setp.lt.s64 \09%p2, %rd51, %rd3;\0A\09@%p2 bra \09LBB0_17;\0A\09add.s64 \09%rd52, %rd72, -2097152;\0A\09setp.lt.s64 \09%p3, %rd52, %rd3;\0A\09@%p3 bra \09LBB0_11;\0ALBB0_12:\0A\09add.s64 \09%rd53, %rd72, -1048576;\0A\09setp.ge.s64 \09%p4, %rd53, %rd3;\0A\09@%p4 bra \09LBB0_14;\0A\09bra.uni \09LBB0_13;\0ALBB0_14:\0A\09setp.ge.s64 \09%p5, %rd72, %rd3;\0A\09@%p5 bra \09LBB0_16;\0ALBB0_15:\0A\09ld.global.u32 \09%r6, [%rd70+4194304];\0A\09st.global.u32 \09[%rd71+4194304], %r6;\0ALBB0_16:\0A\09add.s64 \09%rd73, %rd73, 4;\0A\09add.s64 \09%rd72, %rd72, 4194304;\0A\09add.s64 \09%rd71, %rd71, 16777216;\0A\09add.s64 \09%rd70, %rd70, 16777216;\0A\09setp.eq.s64 \09%p6, %rd65, %rd73;\0A\09@%p6 bra \09LBB0_2;\0A\09bra.uni \09LBB0_9;\0ALBB0_2:\0A\09setp.eq.s64 \09%p7, %rd5, 0;\0A\09@%p7 bra \09LBB0_7;\0ALBB0_3:\0A\09add.s64 \09%rd54, %rd34, %rd33;\0A\09shl.b64 \09%rd55, %rd65, 20;\0A\09add.s64 \09%rd56, %rd54, %rd55;\0A\09add.s64 \09%rd57, %rd56, %rd2;\0A\09add.s64 \09%rd58, %rd57, %rd1;\0A\09shl.b64 \09%rd59, %rd58, 2;\0A\09add.s64 \09%rd69, %rd32, %rd59;\0A\09add.s64 \09%rd60, %rd35, %rd55;\0A\09add.s64 \09%rd61, %rd60, %rd2;\0A\09add.s64 \09%rd62, %rd61, %rd1;\0A\09shl.b64 \09%rd63, %rd62, 2;\0A\09add.s64 \09%rd68, %rd31, %rd63;\0A\09add.s64 \09%rd64, %rd55, %rd2;\0A\09add.s64 \09%rd67, %rd64, %rd1;\0A\09neg.s64 \09%rd66, %rd5;\0ALBB0_4:\0A\09.pragma \22nounroll\22;\0A\09setp.ge.s64 \09%p8, %rd67, %rd3;\0A\09@%p8 bra \09LBB0_6;\0A\09ld.global.u32 \09%r7, [%rd68];\0A\09st.global.u32 \09[%rd69], %r7;\0ALBB0_6:\0A\09add.s64 \09%rd69, %rd69, 4194304;\0A\09add.s64 \09%rd68, %rd68, 4194304;\0A\09add.s64 \09%rd67, %rd67, 1048576;\0A\09add.s64 \09%rd66, %rd66, 1;\0A\09setp.ne.s64 \09%p9, %rd66, 0;\0A\09@%p9 bra \09LBB0_4;\0ALBB0_7:\0A\09ret;\0A}\0A\0A\09// .globl\09_gfortran_polly_array_index_0\0A.visible .func  (.param .b64 func_retval0) _gfortran_polly_array_index_0(\0A\09.param .b64 _gfortran_polly_array_index_0_param_0\0A)\0A{\0A\09.reg .b64 \09%rd<2>;\0A\0A\09ld.param.u64 \09%rd1, [_gfortran_polly_array_index_0_param_0];\0A\09st.param.b64 \09[func_retval0+0], %rd1;\0A\09ret;\0A}\0A\0A\09// .globl\09_gfortran_polly_array_index_1\0A.visible .func  (.param .b64 func_retval0) _gfortran_polly_array_index_1(\0A\09.param .b64 _gfortran_polly_array_index_1_param_0,\0A\09.param .b64 _gfortran_polly_array_index_1_param_1,\0A\09.param .b64 _gfortran_polly_array_index_1_param_2\0A)\0A{\0A\09.reg .b64 \09%rd<6>;\0A\0A\09ld.param.u64 \09%rd1, [_gfortran_polly_array_index_1_param_0];\0A\09ld.param.u64 \09%rd2, [_gfortran_polly_array_index_1_param_1];\0A\09ld.param.u64 \09%rd3, [_gfortran_polly_array_index_1_param_2];\0A\09mul.lo.s64 \09%rd4, %rd3, %rd2;\0A\09add.s64 \09%rd5, %rd4, %rd1;\0A\09st.param.b64 \09[func_retval0+0], %rd5;\0A\09ret;\0A}\0A\0A\09// .globl\09_gfortran_polly_array_index_2\0A.visible .func  (.param .b64 func_retval0) _gfortran_polly_array_index_2(\0A\09.param .b64 _gfortran_polly_array_index_2_param_0,\0A\09.param .b64 _gfortran_polly_array_index_2_param_1,\0A\09.param .b64 _gfortran_polly_array_index_2_param_2,\0A\09.param .b64 _gfortran_polly_array_index_2_param_3,\0A\09.param .b64 _gfortran_polly_array_index_2_param_4\0A)\0A{\0A\09.reg .b64 \09%rd<10>;\0A\0A\09ld.param.u64 \09%rd1, [_gfortran_polly_array_index_2_param_0];\0A\09ld.param.u64 \09%rd2, [_gfortran_polly_array_index_2_param_1];\0A\09ld.param.u64 \09%rd3, [_gfortran_polly_array_index_2_param_3];\0A\09mul.lo.s64 \09%rd4, %rd3, %rd2;\0A\09add.s64 \09%rd5, %rd4, %rd1;\0A\09ld.param.u64 \09%rd6, [_gfortran_polly_array_index_2_param_2];\0A\09ld.param.u64 \09%rd7, [_gfortran_polly_array_index_2_param_4];\0A\09mul.lo.s64 \09%rd8, %rd7, %rd6;\0A\09add.s64 \09%rd9, %rd5, %rd8;\0A\09st.param.b64 \09[func_retval0+0], %rd9;\0A\09ret;\0A}\0A\0A\09// .globl\09_gfortran_polly_array_index_3\0A.visible .func  (.param .b64 func_retval0) _gfortran_polly_array_index_3(\0A\09.param .b64 _gfortran_polly_array_index_3_param_0,\0A\09.param .b64 _gfortran_polly_array_index_3_param_1,\0A\09.param .b64 _gfortran_polly_array_index_3_param_2,\0A\09.param .b64 _gfortran_polly_array_index_3_param_3,\0A\09.param .b64 _gfortran_polly_array_index_3_param_4,\0A\09.param .b64 _gfortran_polly_array_index_3_param_5,\0A\09.param .b64 _gfortran_polly_array_index_3_param_6\0A)\0A{\0A\09.reg .b64 \09%rd<14>;\0A\0A\09ld.param.u64 \09%rd1, [_gfortran_polly_array_index_3_param_0];\0A\09ld.param.u64 \09%rd2, [_gfortran_polly_array_index_3_param_1];\0A\09ld.param.u64 \09%rd3, [_gfortran_polly_array_index_3_param_4];\0A\09mul.lo.s64 \09%rd4, %rd3, %rd2;\0A\09add.s64 \09%rd5, %rd4, %rd1;\0A\09ld.param.u64 \09%rd6, [_gfortran_polly_array_index_3_param_2];\0A\09ld.param.u64 \09%rd7, [_gfortran_polly_array_index_3_param_5];\0A\09mul.lo.s64 \09%rd8, %rd7, %rd6;\0A\09ld.param.u64 \09%rd9, [_gfortran_polly_array_index_3_param_3];\0A\09add.s64 \09%rd10, %rd5, %rd8;\0A\09ld.param.u64 \09%rd11, [_gfortran_polly_array_index_3_param_6];\0A\09mul.lo.s64 \09%rd12, %rd11, %rd9;\0A\09add.s64 \09%rd13, %rd10, %rd12;\0A\09st.param.b64 \09[func_retval0+0], %rd13;\0A\09ret;\0A}\0A\0A\09// .globl\09_gfortran_polly_array_index_4\0A.visible .func  (.param .b64 func_retval0) _gfortran_polly_array_index_4(\0A\09.param .b64 _gfortran_polly_array_index_4_param_0,\0A\09.param .b64 _gfortran_polly_array_index_4_param_1,\0A\09.param .b64 _gfortran_polly_array_index_4_param_2,\0A\09.param .b64 _gfortran_polly_array_index_4_param_3,\0A\09.param .b64 _gfortran_polly_array_index_4_param_4,\0A\09.param .b64 _gfortran_polly_array_index_4_param_5,\0A\09.param .b64 _gfortran_polly_array_index_4_param_6,\0A\09.param .b64 _gfortran_polly_array_index_4_param_7,\0A\09.param .b64 _gfortran_polly_array_index_4_param_8\0A)\0A{\0A\09.reg .b64 \09%rd<18>;\0A\0A\09ld.param.u64 \09%rd1, [_gfortran_polly_array_index_4_param_0];\0A\09ld.param.u64 \09%rd2, [_gfortran_polly_array_index_4_param_1];\0A\09ld.param.u64 \09%rd3, [_gfortran_polly_array_index_4_param_5];\0A\09mul.lo.s64 \09%rd4, %rd3, %rd2;\0A\09add.s64 \09%rd5, %rd4, %rd1;\0A\09ld.param.u64 \09%rd6, [_gfortran_polly_array_index_4_param_2];\0A\09ld.param.u64 \09%rd7, [_gfortran_polly_array_index_4_param_6];\0A\09mul.lo.s64 \09%rd8, %rd7, %rd6;\0A\09ld.param.u64 \09%rd9, [_gfortran_polly_array_index_4_param_3];\0A\09add.s64 \09%rd10, %rd5, %rd8;\0A\09ld.param.u64 \09%rd11, [_gfortran_polly_array_index_4_param_4];\0A\09ld.param.u64 \09%rd12, [_gfortran_polly_array_index_4_param_7];\0A\09mul.lo.s64 \09%rd13, %rd12, %rd9;\0A\09add.s64 \09%rd14, %rd10, %rd13;\0A\09ld.param.u64 \09%rd15, [_gfortran_polly_array_index_4_param_8];\0A\09mul.lo.s64 \09%rd16, %rd15, %rd11;\0A\09add.s64 \09%rd17, %rd14, %rd16;\0A\09st.param.b64 \09[func_retval0+0], %rd17;\0A\09ret;\0A}\0A\0A\0A\00"
@FUNC___m_MOD_f_SCOP_0_KERNEL_0_name = private unnamed_addr constant [31 x i8] c"FUNC___m_MOD_f_SCOP_0_KERNEL_0\00"

; Function Attrs: nounwind uwtable
define void @__m_MOD_f([0 x float]* noalias %srcarr, i32* noalias %dim1, i32* noalias %dim2) #0 {
entry:
  %0 = call i8* @polly_mallocManaged(i64 8)
  %.preload.s2a6 = bitcast i8* %0 to i64*
  %1 = call i8* @polly_mallocManaged(i64 8)
  %.preload.s2a4 = bitcast i8* %1 to i64*
  %2 = call i8* @polly_mallocManaged(i64 8)
  %.preload.s2a2 = bitcast i8* %2 to float**
  %3 = call i8* @polly_mallocManaged(i64 4)
  %.preload.s2a1 = bitcast i8* %3 to i32*
  %4 = call i8* @polly_mallocManaged(i64 4)
  %.preload.s2a = bitcast i8* %4 to i32*
  %5 = call i8* @polly_mallocManaged(i64 88)
  %polly_launch_0_params = bitcast i8* %5 to [11 x i8*]*
  %6 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_0 = bitcast i8* %6 to i8**
  %7 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_1 = bitcast i8* %7 to i8**
  %8 = call i8* @polly_mallocManaged(i64 4)
  %polly_launch_0_param_2 = bitcast i8* %8 to i32*
  %9 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_3 = bitcast i8* %9 to i64*
  %10 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_4 = bitcast i8* %10 to i64*
  %11 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_5 = bitcast i8* %11 to i64*
  %12 = call i8* @polly_mallocManaged(i64 4)
  %polly_launch_0_param_6 = bitcast i8* %12 to i32*
  %13 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_7 = bitcast i8* %13 to i64*
  %14 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_8 = bitcast i8* %14 to i64*
  %15 = call i8* @polly_mallocManaged(i64 8)
  %polly_launch_0_param_9 = bitcast i8* %15 to i64*
  %16 = call i8* @polly_mallocManaged(i64 4)
  %polly_launch_0_param_10 = bitcast i8* %16 to i32*
  %polly_launch_0_params_i8ptr = bitcast [11 x i8*]* %polly_launch_0_params to i8*
  br label %polly.split_new_and_old

polly.split_new_and_old:                          ; preds = %entry
  br label %polly.preload.begin

polly.preload.begin:                              ; preds = %polly.split_new_and_old
  %polly.access.dim1 = getelementptr i32, i32* %dim1, i64 0
  %polly.access.dim1.load = load i32, i32* %polly.access.dim1, align 4, !alias.scope !0, !noalias !2
  store i32 %polly.access.dim1.load, i32* %.preload.s2a
  %polly.access.dim2 = getelementptr i32, i32* %dim2, i64 0
  %polly.access.dim2.load = load i32, i32* %polly.access.dim2, align 4, !alias.scope !3, !noalias !7
  store i32 %polly.access.dim2.load, i32* %.preload.s2a1
  %.load = load float*, float** bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to float**), align 32, !alias.scope !4, !noalias !8
  store float* %.load, float** %.preload.s2a2
  %.load3 = load i64, i64* bitcast (float** getelementptr (float*, float** bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to float**), i64 4) to i64*), align 8, !alias.scope !4, !noalias !8
  store i64 %.load3, i64* %.preload.s2a4
  %.load5 = load i64, i64* bitcast (float** getelementptr (float*, float** bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to float**), i64 1) to i64*), align 8, !alias.scope !4, !noalias !8
  store i64 %.load5, i64* %.preload.s2a6
  %17 = sext i32 %polly.access.dim1.load to i64
  %18 = icmp sgt i64 %17, 0
  %smax = select i1 %18, i64 %17, i64 0
  %19 = add i32 %polly.access.dim2.load, 1
  %20 = sext i32 %19 to i64
  %21 = add i64 %20, -1
  %22 = mul i64 %smax, %21
  %polly.access.cast..load = bitcast float* %.load to i32*
  %23 = add nsw i64 %.load5, %.load3
  %polly.access..load = getelementptr i32, i32* %polly.access.cast..load, i64 %23
  %24 = ptrtoint i32* %polly.access..load to i64
  %25 = icmp ule i64 ptrtoint (float** getelementptr (float*, float** bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to float**), i64 5) to i64), %24
  %polly.access.cast..load7 = bitcast float* %.load to i32*
  %26 = sext i32 %polly.access.dim1.load to i64
  %27 = add nsw i64 %26, %.load5
  %28 = add nsw i64 %27, %.load3
  %polly.access..load8 = getelementptr i32, i32* %polly.access.cast..load7, i64 %28
  %29 = ptrtoint i32* %polly.access..load8 to i64
  %30 = icmp ule i64 %29, ptrtoint (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to i64)
  %31 = or i1 %25, %30
  %32 = and i1 true, %31
  %33 = sext i32 %polly.access.dim1.load to i64
  %34 = mul nsw i64 1, %33
  %35 = mul nsw i64 14, %34
  %36 = add nsw i64 0, %35
  %37 = icmp sge i64 %36, 0
  %38 = and i1 %32, %37
  br i1 %38, label %polly.start, label %entry.split.pre_entry_bb

entry.split.pre_entry_bb:                         ; preds = %polly.preload.begin
  br label %entry.split

entry.split:                                      ; preds = %entry.split.pre_entry_bb
  %39 = load i32, i32* %dim1, align 4
  %40 = sext i32 %39 to i64
  %41 = icmp sgt i64 %40, 0
  %42 = select i1 %41, i64 %40, i64 0
  %43 = load i32, i32* %dim2, align 4
  %44 = add i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = mul nsw i64 %42, %45
  %not = xor i64 %42, -1
  %47 = load float*, float** bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to float**), align 32
  %48 = load i64, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 1), align 8
  %49 = load i64, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 3, i64 0, i32 1), align 8
  %50 = add i64 %46, %not
  %51 = icmp slt i32 %39, 1
  br i1 %51, label %return.region_exiting, label %"4.lr.ph"

"4.lr.ph":                                        ; preds = %entry.split
  br label %"4"

"4":                                              ; preds = %"4", %"4.lr.ph"
  %52 = phi i64 [ 1, %"4.lr.ph" ], [ %62, %"4" ]
  %53 = add i64 %48, -1
  %54 = add i64 %53, %49
  %55 = add i64 %54, %52
  %56 = add nsw i64 %50, %52
  %57 = getelementptr [0 x float], [0 x float]* %srcarr, i64 0, i64 %56
  %58 = bitcast float* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr float, float* %47, i64 %55
  %61 = bitcast float* %60 to i32*
  store i32 %59, i32* %61, align 4
  %62 = add nuw nsw i64 %52, 1
  %63 = icmp sgt i64 %62, %40
  br i1 %63, label %"3.return_crit_edge", label %"4"

"3.return_crit_edge":                             ; preds = %"4"
  br label %return.region_exiting

return.region_exiting:                            ; preds = %"3.return_crit_edge", %entry.split
  br label %polly.merge_new_and_old

polly.merge_new_and_old:                          ; preds = %polly.exiting, %return.region_exiting
  br label %return

return:                                           ; preds = %polly.merge_new_and_old
  call void @polly_freeManaged(i8* %11)
  call void @polly_freeManaged(i8* %9)
  call void @polly_freeManaged(i8* %10)
  call void @polly_freeManaged(i8* %0)
  call void @polly_freeManaged(i8* %13)
  call void @polly_freeManaged(i8* %12)
  call void @polly_freeManaged(i8* %8)
  call void @polly_freeManaged(i8* %5)
  call void @polly_freeManaged(i8* %7)
  call void @polly_freeManaged(i8* %6)
  call void @polly_freeManaged(i8* %2)
  call void @polly_freeManaged(i8* %16)
  call void @polly_freeManaged(i8* %1)
  call void @polly_freeManaged(i8* %14)
  call void @polly_freeManaged(i8* %4)
  call void @polly_freeManaged(i8* %3)
  call void @polly_freeManaged(i8* %15)
  ret void

polly.start:                                      ; preds = %polly.preload.begin
  br label %polly.acc.initialize

polly.acc.initialize:                             ; preds = %polly.start
  %64 = call i8* @polly_initContextCUDA()
  br label %polly.cond

polly.cond:                                       ; preds = %polly.acc.initialize
  %65 = sext i32 %polly.access.dim1.load to i64
  %66 = icmp sge i64 %65, 1
  br i1 %66, label %polly.then, label %polly.else

polly.merge:                                      ; preds = %polly.else, %polly.then
  call void @polly_freeContext(i8* %64)
  br label %polly.exiting

polly.exiting:                                    ; preds = %polly.merge
  br label %polly.merge_new_and_old

polly.then:                                       ; preds = %polly.cond
  %67 = add nsw i64 0, %22
  %68 = bitcast [0 x float]* %srcarr to i32*
  %69 = sub i64 0, %67
  %70 = getelementptr i32, i32* %68, i64 %69
  %71 = bitcast i32* %70 to i8*
  %72 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 0
  store i8* %71, i8** %polly_launch_0_param_0
  %ParamTyped = bitcast i8** %polly_launch_0_param_0 to i8*
  store i8* %ParamTyped, i8** %72
  %73 = add nsw i64 %.load5, %.load3
  %74 = add nsw i64 0, %73
  %75 = bitcast float* %.load to i32*
  %76 = sub i64 0, %74
  %77 = getelementptr i32, i32* %75, i64 %76
  %78 = bitcast i32* %77 to i8*
  %79 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 1
  store i8* %78, i8** %polly_launch_0_param_1
  %ParamTyped9 = bitcast i8** %polly_launch_0_param_1 to i8*
  store i8* %ParamTyped9, i8** %79
  store i32 %polly.access.dim1.load, i32* %polly_launch_0_param_2
  %80 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 2
  %81 = bitcast i32* %polly_launch_0_param_2 to i8*
  store i8* %81, i8** %80
  store i64 %.load5, i64* %polly_launch_0_param_3
  %82 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 3
  %83 = bitcast i64* %polly_launch_0_param_3 to i8*
  store i8* %83, i8** %82
  store i64 %.load3, i64* %polly_launch_0_param_4
  %84 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 4
  %85 = bitcast i64* %polly_launch_0_param_4 to i8*
  store i8* %85, i8** %84
  store i64 %22, i64* %polly_launch_0_param_5
  %86 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 5
  %87 = bitcast i64* %polly_launch_0_param_5 to i8*
  store i8* %87, i8** %86
  store i32 %polly.access.dim1.load, i32* %polly_launch_0_param_6
  %88 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 6
  %89 = bitcast i32* %polly_launch_0_param_6 to i8*
  store i8* %89, i8** %88
  store i64 %.load3, i64* %polly_launch_0_param_7
  %90 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 7
  %91 = bitcast i64* %polly_launch_0_param_7 to i8*
  store i8* %91, i8** %90
  store i64 %.load5, i64* %polly_launch_0_param_8
  %92 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 8
  %93 = bitcast i64* %polly_launch_0_param_8 to i8*
  store i8* %93, i8** %92
  store i64 %22, i64* %polly_launch_0_param_9
  %94 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 9
  %95 = bitcast i64* %polly_launch_0_param_9 to i8*
  store i8* %95, i8** %94
  store i32 %polly.access.dim2.load, i32* %polly_launch_0_param_10
  %96 = getelementptr [11 x i8*], [11 x i8*]* %polly_launch_0_params, i64 0, i64 10
  %97 = bitcast i32* %polly_launch_0_param_10 to i8*
  store i8* %97, i8** %96
  %98 = call i8* @polly_getKernel(i8* getelementptr inbounds ([8502 x i8], [8502 x i8]* @FUNC___m_MOD_f_SCOP_0_KERNEL_0, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @FUNC___m_MOD_f_SCOP_0_KERNEL_0_name, i32 0, i32 0))
  %99 = sext i32 %polly.access.dim1.load to i64
  %100 = icmp sge i64 %99, 1048546
  %101 = sext i32 %polly.access.dim1.load to i64
  %102 = add nsw i64 %101, 31
  %polly.fdiv_q.shr = ashr i64 %102, 5
  %103 = select i1 %100, i64 32768, i64 %polly.fdiv_q.shr
  %104 = trunc i64 %103 to i32
  call void @polly_launchKernel(i8* %98, i32 %104, i32 1, i32 32, i32 1, i32 1, i8* %polly_launch_0_params_i8ptr)
  call void @polly_freeKernel(i8* %98)
  call void @polly_synchronizeDevice()
  br label %polly.merge

polly.else:                                       ; preds = %polly.cond
  br label %polly.merge
}

; Function Attrs: nounwind uwtable
define internal void @MAIN__() #0 {
entry:
  %0 = call i8* @polly_mallocManaged(i64 480)
  %dt_parm.10 = bitcast i8* %0 to %struct.__st_parameter_dt*
  %1 = call i8* @polly_mallocManaged(i64 480)
  %dt_parm.11 = bitcast i8* %1 to %struct.__st_parameter_dt*
  %2 = call i8* @polly_mallocManaged(i64 480)
  %dt_parm.12 = bitcast i8* %2 to %struct.__st_parameter_dt*
  %3 = call i8* @polly_mallocManaged(i64 480)
  %dt_parm.13 = bitcast i8* %3 to %struct.__st_parameter_dt*
  %4 = call i8* @polly_mallocManaged(i64 480)
  %dt_parm.14 = bitcast i8* %4 to %struct.__st_parameter_dt*
  %5 = call i8* @polly_mallocManaged(i64 480)
  %dt_parm.15 = bitcast i8* %5 to %struct.__st_parameter_dt*
  br label %entry.split

entry.split:                                      ; preds = %entry
  store i64 281, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 2), align 16
  store i64 0, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 3, i64 0, i32 1), align 8
  store i64 3, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 3, i64 0, i32 2), align 8
  store i64 1, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 3, i64 0, i32 0), align 8
  %6 = tail call i64 @llvm.expect.i64(i64 0, i64 0)
  %7 = and i64 %6, 1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %"4", label %"3"

"3":                                              ; preds = %entry.split
  tail call void bitcast (void (i8*, ...)* @_gfortran_runtime_error to void (i8*)*)(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.cst, i64 0, i64 0)) #3
  unreachable

"4":                                              ; preds = %entry.split
  %9 = load i8*, i8** getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 0), align 32
  %10 = icmp eq i8* %9, null
  br i1 %10, label %"5", label %"8"

"5":                                              ; preds = %"4"
  %11 = tail call noalias i8* @polly_mallocManaged(i64 16) #3
  %12 = icmp eq i8* %11, null
  br i1 %12, label %"6", label %"7"

"6":                                              ; preds = %"5"
  tail call void @_gfortran_os_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.cst1, i64 0, i64 0)) #4
  unreachable

"7":                                              ; preds = %"5"
  store i8* %11, i8** getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 0), align 32
  store i64 0, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 1), align 8
  store i64 282, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 2), align 16
  store i64 0, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 0, i32 1), align 8
  store i64 3, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 0, i32 2), align 8
  store i64 1, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 1, i32 1), align 8
  store i64 1, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 1, i32 2), align 8
  store i64 4, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 1, i32 0), align 8
  %13 = load i8*, i8** getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 0), align 32
  %14 = icmp eq i8* %13, null
  br i1 %14, label %"11", label %"14"

"8":                                              ; preds = %"4"
  tail call void bitcast (void (i8*, i8*, ...)* @_gfortran_runtime_error_at to void (i8*, i8*, i8*)*)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.cst2, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.cst3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.cst4, i64 0, i64 0)) #3
  unreachable

"11":                                             ; preds = %"7"
  %15 = tail call noalias i8* @polly_mallocManaged(i64 32) #3
  %16 = icmp eq i8* %15, null
  br i1 %16, label %"12", label %"13"

"12":                                             ; preds = %"11"
  tail call void @_gfortran_os_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.cst1, i64 0, i64 0)) #4
  unreachable

"13":                                             ; preds = %"11"
  store i8* %15, i8** getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 0), align 32
  store i64 0, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 1), align 8
  br label %"15"

"14":                                             ; preds = %"7"
  tail call void bitcast (void (i8*, i8*, ...)* @_gfortran_runtime_error_at to void (i8*, i8*, i8*)*)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.cst5, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.cst3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.cst6, i64 0, i64 0)) #3
  unreachable

"15":                                             ; preds = %"15", %"13"
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %"15" ], [ 0, %"13" ]
  %17 = load float*, float** bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to float**), align 32
  %18 = load i64, i64* getelementptr inbounds (%"struct.array1_real(kind=4)", %"struct.array1_real(kind=4)"* @__m_MOD_arr1, i64 0, i32 1), align 8
  %19 = tail call i64 @_gfortran_polly_array_index_1(i64 %18, i64 1, i64 %indvars.iv3) #3
  %20 = getelementptr float, float* %17, i64 %19
  store float -4.200000e+01, float* %20, align 4
  %21 = icmp eq i64 %indvars.iv3, 3
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  br i1 %21, label %"17", label %"15"

"17":                                             ; preds = %"15"
  br label %"18"

"18":                                             ; preds = %"21", %"17"
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %"21" ], [ 0, %"17" ]
  br label %"19"

"19":                                             ; preds = %"19", %"18"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"19" ], [ 0, %"18" ]
  %22 = load float*, float** bitcast (%"struct.array2_real(kind=4)"* @__m_MOD_arr2 to float**), align 32
  %23 = load i64, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 3, i64 1, i32 0), align 8
  %24 = load i64, i64* getelementptr inbounds (%"struct.array2_real(kind=4)", %"struct.array2_real(kind=4)"* @__m_MOD_arr2, i64 0, i32 1), align 8
  %25 = tail call i64 @_gfortran_polly_array_index_2(i64 %24, i64 %23, i64 1, i64 %indvars.iv, i64 %indvars.iv1) #3
  %26 = mul nuw nsw i64 %indvars.iv, %indvars.iv1
  %27 = add nsw i64 %26, -3
  %28 = trunc i64 %27 to i32
  %29 = sitofp i32 %28 to float
  %30 = getelementptr float, float* %22, i64 %25
  store float %29, float* %30, align 4
  %31 = icmp eq i64 %indvars.iv, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %31, label %"21", label %"19"

"21":                                             ; preds = %"19"
  %32 = icmp eq i64 %indvars.iv1, 3
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  br i1 %32, label %"23", label %"18"

"23":                                             ; preds = %"21"
  %33 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.10, i64 0, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.cst7, i64 0, i64 0), i8** %33, align 8
  %34 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.10, i64 0, i32 0, i32 3
  store i32 37, i32* %34, align 8
  %35 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.10, i64 0, i32 0, i32 0
  store i32 128, i32* %35, align 8
  %36 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.10, i64 0, i32 0, i32 1
  store i32 6, i32* %36, align 4
  call void @_gfortran_st_write(%struct.__st_parameter_dt* nonnull %dt_parm.10) #3
  call void @_gfortran_transfer_character_write(%struct.__st_parameter_dt* nonnull %dt_parm.10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.cst8, i64 0, i64 0), i32 5) #3
  call void @_gfortran_st_write_done(%struct.__st_parameter_dt* nonnull %dt_parm.10) #3
  %37 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.11, i64 0, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.cst7, i64 0, i64 0), i8** %37, align 8
  %38 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.11, i64 0, i32 0, i32 3
  store i32 38, i32* %38, align 8
  %39 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.11, i64 0, i32 0, i32 0
  store i32 128, i32* %39, align 8
  %40 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.11, i64 0, i32 0, i32 1
  store i32 6, i32* %40, align 4
  call void @_gfortran_st_write(%struct.__st_parameter_dt* nonnull %dt_parm.11) #3
  call void @_gfortran_transfer_array_write(%struct.__st_parameter_dt* nonnull %dt_parm.11, i8* nonnull bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to i8*), i32 4, i32 0) #3
  call void @_gfortran_st_write_done(%struct.__st_parameter_dt* nonnull %dt_parm.11) #3
  %41 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.12, i64 0, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.cst7, i64 0, i64 0), i8** %41, align 8
  %42 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.12, i64 0, i32 0, i32 3
  store i32 39, i32* %42, align 8
  %43 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.12, i64 0, i32 0, i32 0
  store i32 128, i32* %43, align 8
  %44 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.12, i64 0, i32 0, i32 1
  store i32 6, i32* %44, align 4
  call void @_gfortran_st_write(%struct.__st_parameter_dt* nonnull %dt_parm.12) #3
  call void @_gfortran_transfer_character_write(%struct.__st_parameter_dt* nonnull %dt_parm.12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.cst9, i64 0, i64 0), i32 5) #3
  call void @_gfortran_st_write_done(%struct.__st_parameter_dt* nonnull %dt_parm.12) #3
  %45 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.13, i64 0, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.cst7, i64 0, i64 0), i8** %45, align 8
  %46 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.13, i64 0, i32 0, i32 3
  store i32 40, i32* %46, align 8
  %47 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.13, i64 0, i32 0, i32 0
  store i32 128, i32* %47, align 8
  %48 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.13, i64 0, i32 0, i32 1
  store i32 6, i32* %48, align 4
  call void @_gfortran_st_write(%struct.__st_parameter_dt* nonnull %dt_parm.13) #3
  call void @_gfortran_transfer_array_write(%struct.__st_parameter_dt* nonnull %dt_parm.13, i8* nonnull bitcast (%"struct.array2_real(kind=4)"* @__m_MOD_arr2 to i8*), i32 4, i32 0) #3
  call void @_gfortran_st_write_done(%struct.__st_parameter_dt* nonnull %dt_parm.13) #3
  %49 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.14, i64 0, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.cst7, i64 0, i64 0), i8** %49, align 8
  %50 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.14, i64 0, i32 0, i32 3
  store i32 41, i32* %50, align 8
  %51 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.14, i64 0, i32 0, i32 0
  store i32 128, i32* %51, align 8
  %52 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.14, i64 0, i32 0, i32 1
  store i32 6, i32* %52, align 4
  call void @_gfortran_st_write(%struct.__st_parameter_dt* nonnull %dt_parm.14) #3
  call void @_gfortran_transfer_character_write(%struct.__st_parameter_dt* nonnull %dt_parm.14, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.cst10, i64 0, i64 0), i32 17) #3
  call void @_gfortran_st_write_done(%struct.__st_parameter_dt* nonnull %dt_parm.14) #3
  %53 = load [0 x float]*, [0 x float]** bitcast (%"struct.array2_real(kind=4)"* @__m_MOD_arr2 to [0 x float]**), align 32
  call void @__m_MOD_f([0 x float]* noalias %53, i32* nonnull @0, i32* nonnull @1) #3
  %54 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.15, i64 0, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.cst7, i64 0, i64 0), i8** %54, align 8
  %55 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.15, i64 0, i32 0, i32 3
  store i32 43, i32* %55, align 8
  %56 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.15, i64 0, i32 0, i32 0
  store i32 128, i32* %56, align 8
  %57 = getelementptr inbounds %struct.__st_parameter_dt, %struct.__st_parameter_dt* %dt_parm.15, i64 0, i32 0, i32 1
  store i32 6, i32* %57, align 4
  call void @_gfortran_st_write(%struct.__st_parameter_dt* nonnull %dt_parm.15) #3
  call void @_gfortran_transfer_array_write(%struct.__st_parameter_dt* nonnull %dt_parm.15, i8* nonnull bitcast (%"struct.array1_real(kind=4)"* @__m_MOD_arr1 to i8*), i32 4, i32 0) #3
  call void @_gfortran_st_write_done(%struct.__st_parameter_dt* nonnull %dt_parm.15) #3
  call void @polly_freeManaged(i8* %1)
  call void @polly_freeManaged(i8* %5)
  call void @polly_freeManaged(i8* %0)
  call void @polly_freeManaged(i8* %4)
  call void @polly_freeManaged(i8* %3)
  call void @polly_freeManaged(i8* %2)
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #1

; Function Attrs: readnone
declare void @_gfortran_runtime_error(i8*, ...) #2

; Function Attrs: readnone
declare void @_gfortran_os_error(i8*) #2

; Function Attrs: readnone
declare void @_gfortran_runtime_error_at(i8*, i8*, ...) #2

; Function Attrs: readnone
declare i64 @_gfortran_polly_array_index_1(i64, i64, i64) #2

; Function Attrs: readnone
declare i64 @_gfortran_polly_array_index_2(i64, i64, i64, i64, i64) #2

declare void @_gfortran_st_write(%struct.__st_parameter_dt*)

declare void @_gfortran_transfer_character_write(%struct.__st_parameter_dt*, i8*, i32)

declare void @_gfortran_st_write_done(%struct.__st_parameter_dt*)

declare void @_gfortran_transfer_array_write(%struct.__st_parameter_dt*, i8*, i32, i32)

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) unnamed_addr #0 {
entry:
  br label %entry.split

entry.split:                                      ; preds = %entry
  tail call void @_gfortran_set_args(i32 %argc, i8** %argv) #3
  tail call void @_gfortran_set_options(i32 8, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @options.16.1624, i64 0, i64 0)) #3
  tail call void @MAIN__() #0
  ret i32 0
}

declare void @_gfortran_set_args(i32, i8**)

declare void @_gfortran_set_options(i32, i32*)

declare i8* @polly_initContextCUDA()

declare i8* @polly_getKernel(i8*, i8*)

declare void @polly_launchKernel(i8*, i32, i32, i32, i32, i32, i8*)

declare void @polly_freeKernel(i8*)

declare void @polly_synchronizeDevice()

declare void @polly_freeContext(i8*)

declare i8* @polly_mallocManaged(i64)

declare void @polly_freeManaged(i8*)

attributes #0 = { nounwind uwtable }
attributes #1 = { nounwind readnone }
attributes #2 = { readnone }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!0 = distinct !{!0, !1, !"polly.alias.scope.MemRef_dim1"}
!1 = distinct !{!1, !"polly.alias.scope.domain"}
!2 = !{!3, !4, !5, !6}
!3 = distinct !{!3, !1, !"polly.alias.scope.MemRef_dim2"}
!4 = distinct !{!4, !1, !"polly.alias.scope.MemRef___m_MOD_arr1"}
!5 = distinct !{!5, !1, !"polly.alias.scope.MemRef_srcarr"}
!6 = distinct !{!6, !1, !"polly.alias.scope.MemRef4"}
!7 = !{!0, !4, !5, !6}
!8 = !{!0, !3, !5, !6}
