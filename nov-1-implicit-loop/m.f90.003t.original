f (real(kind=4)[0:D.1588] * restrict srcarr, integer(kind=4) & restrict dim1, integer(kind=4) & restrict dim2)
{
  integer(kind=8) ubound.0;
  integer(kind=8) ubound.1;
  integer(kind=8) stride.2;
  integer(kind=8) offset.3;
  integer(kind=8) size.4;
  integer(kind=8) D.1588;
  bit_size_type D.1589;
  <unnamed-unsigned:64> D.1590;

  ubound.0 = (integer(kind=8)) *dim1;
  stride.2 = NON_LVALUE_EXPR <ubound.0>;
  stride.2 = MAX_EXPR <stride.2, 0>;
  ubound.1 = (integer(kind=8)) (*dim2 + 1);
  size.4 = stride.2 * NON_LVALUE_EXPR <ubound.1>;
  size.4 = MAX_EXPR <size.4, 0>;
  D.1588 = size.4 + -1;
  D.1589 = (bit_size_type) size.4 * 32;
  D.1590 = (<unnamed-unsigned:64>) size.4 * 4;
  offset.3 = ~NON_LVALUE_EXPR <stride.2>;
  {
    integer(kind=8) D.1584;
    integer(kind=8) D.1583;
    integer(kind=8) D.1582;
    integer(kind=8) D.1581;
    integer(kind=8) D.1580;
    real(kind=4)[0:] * restrict D.1579;
    integer(kind=8) D.1578;
    integer(kind=8) D.1577;

    D.1577 = offset.3;
    D.1578 = ubound.0;
    D.1579 = (real(kind=4)[0:] * restrict) arr1.data;
    D.1580 = arr1.offset;
    D.1581 = arr1.dim[0].lbound;
    D.1582 = arr1.dim[0].ubound;
    D.1583 = (integer(kind=8)) (*dim2 + 1);
    D.1584 = D.1581 + -1;
    {
      integer(kind=8) D.1586;
      integer(kind=8) S.5;

      D.1586 = D.1583 * stride.2 + D.1577;
      S.5 = 1;
      while (1)
        {
          if (S.5 > D.1578) goto L.1;
          (*D.1579)[(S.5 + D.1584) + D.1580] = (*srcarr)[S.5 + D.1586];
          S.5 = S.5 + 1;
        }
      L.1:;
    }
  }
}


p ()
{
  integer(kind=4) i;
  integer(kind=4) j;

  {
    integer(kind=4) overflow.7;
    integer(kind=4) overflow.6;

    arr1.dtype = 281;
    arr1.dim[0].lbound = 0;
    arr1.dim[0].ubound = 3;
    arr1.dim[0].stride = 1;
    overflow.6 = 0;
    if ((logical(kind=4)) __builtin_expect (overflow.6 != 0, 0))
      {
        _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
      }
    else
      {
        {
          void * restrict D.1596;

          if (arr1.data == 0B)
            {
              {
                void * restrict D.1597;

                D.1597 = (void * restrict) __builtin_malloc (16);
                if (D.1597 == 0B)
                  {
                    _gfortran_os_error (&"Allocation would exceed memory limit"[1]{lb: 1 sz: 1});
                  }
                D.1596 = D.1597;
              }
            }
          else
            {
              _gfortran_runtime_error_at (&"At line 24 of file m.f90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"arr1"[1]{lb: 1 sz: 1});
            }
          arr1.data = D.1596;
        }
      }
    arr1.offset = 0;
    arr2.dtype = 282;
    arr2.dim[0].lbound = 0;
    arr2.dim[0].ubound = 3;
    arr2.dim[0].stride = 1;
    arr2.dim[1].lbound = 0;
    arr2.dim[1].ubound = 1;
    arr2.dim[1].stride = 4;
    overflow.7 = 0;
    if ((logical(kind=4)) __builtin_expect (overflow.7 != 0, 0))
      {
        _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
      }
    else
      {
        {
          void * restrict D.1599;

          if (arr2.data == 0B)
            {
              {
                void * restrict D.1600;

                D.1600 = (void * restrict) __builtin_malloc (32);
                if (D.1600 == 0B)
                  {
                    _gfortran_os_error (&"Allocation would exceed memory limit"[1]{lb: 1 sz: 1});
                  }
                D.1599 = D.1600;
              }
            }
          else
            {
              _gfortran_runtime_error_at (&"At line 25 of file m.f90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"arr2"[1]{lb: 1 sz: 1});
            }
          arr2.data = D.1599;
        }
      }
    arr2.offset = 0;
    i = 0;
    if (i <= 3)
      {
        while (1)
          {
            {
              logical(kind=4) D.1604;

              {
                integer(kind=8) inc.8;

                (*(real(kind=4)[0:] * restrict) arr1.data)[_gfortran_polly_array_index_1 (arr1.offset, 1, (integer(kind=8)) i)] = -4.2e+1;
              }
              L.2:;
              D.1604 = i == 3;
              i = i + 1;
              if (D.1604) goto L.3;
            }
          }
      }
    L.3:;
    i = 0;
    if (i <= 3)
      {
        while (1)
          {
            {
              logical(kind=4) D.1611;

              j = 0;
              if (j <= 1)
                {
                  while (1)
                    {
                      {
                        logical(kind=4) D.1610;

                        {
                          integer(kind=8) inc.9;

                          (*(real(kind=4)[0:] * restrict) arr2.data)[_gfortran_polly_array_index_2 (arr2.offset, arr2.dim[1].stride, 1, (integer(kind=8)) j, (integer(kind=8)) i)] = (real(kind=4)) (i * j + -3);
                        }
                        L.6:;
                        D.1610 = j == 1;
                        j = j + 1;
                        if (D.1610) goto L.7;
                      }
                    }
                }
              L.7:;
              L.4:;
              D.1611 = i == 3;
              i = i + 1;
              if (D.1611) goto L.5;
            }
          }
      }
    L.5:;
    {
      struct __st_parameter_dt dt_parm.10;

      dt_parm.10.common.filename = &"m.f90"[1]{lb: 1 sz: 1};
      dt_parm.10.common.line = 37;
      dt_parm.10.common.flags = 128;
      dt_parm.10.common.unit = 6;
      _gfortran_st_write (&dt_parm.10);
      _gfortran_transfer_character_write (&dt_parm.10, &"arr1:"[1]{lb: 1 sz: 1}, 5);
      _gfortran_st_write_done (&dt_parm.10);
    }
    {
      struct __st_parameter_dt dt_parm.11;

      dt_parm.11.common.filename = &"m.f90"[1]{lb: 1 sz: 1};
      dt_parm.11.common.line = 38;
      dt_parm.11.common.flags = 128;
      dt_parm.11.common.unit = 6;
      _gfortran_st_write (&dt_parm.11);
      _gfortran_transfer_array_write (&dt_parm.11, &arr1, 4, 0);
      _gfortran_st_write_done (&dt_parm.11);
    }
    {
      struct __st_parameter_dt dt_parm.12;

      dt_parm.12.common.filename = &"m.f90"[1]{lb: 1 sz: 1};
      dt_parm.12.common.line = 39;
      dt_parm.12.common.flags = 128;
      dt_parm.12.common.unit = 6;
      _gfortran_st_write (&dt_parm.12);
      _gfortran_transfer_character_write (&dt_parm.12, &"arr2:"[1]{lb: 1 sz: 1}, 5);
      _gfortran_st_write_done (&dt_parm.12);
    }
    {
      struct __st_parameter_dt dt_parm.13;

      dt_parm.13.common.filename = &"m.f90"[1]{lb: 1 sz: 1};
      dt_parm.13.common.line = 40;
      dt_parm.13.common.flags = 128;
      dt_parm.13.common.unit = 6;
      _gfortran_st_write (&dt_parm.13);
      _gfortran_transfer_array_write (&dt_parm.13, &arr2, 4, 0);
      _gfortran_st_write_done (&dt_parm.13);
    }
    {
      struct __st_parameter_dt dt_parm.14;

      dt_parm.14.common.filename = &"m.f90"[1]{lb: 1 sz: 1};
      dt_parm.14.common.line = 41;
      dt_parm.14.common.flags = 128;
      dt_parm.14.common.unit = 6;
      _gfortran_st_write (&dt_parm.14);
      _gfortran_transfer_character_write (&dt_parm.14, &"===calling f()==="[1]{lb: 1 sz: 1}, 17);
      _gfortran_st_write_done (&dt_parm.14);
    }
    {
      static integer(kind=4) C.1618 = 0;
      static integer(kind=4) C.1617 = 0;

      f ((real(kind=4)[0:] * restrict) arr2.data, &C.1617, &C.1618);
    }
    {
      struct __st_parameter_dt dt_parm.15;

      dt_parm.15.common.filename = &"m.f90"[1]{lb: 1 sz: 1};
      dt_parm.15.common.line = 43;
      dt_parm.15.common.flags = 128;
      dt_parm.15.common.unit = 6;
      _gfortran_st_write (&dt_parm.15);
      _gfortran_transfer_array_write (&dt_parm.15, &arr1, 4, 0);
      _gfortran_st_write_done (&dt_parm.15);
    }
  }
}


main (integer(kind=4) argc, character(kind=1) * * argv)
{
  static integer(kind=4) options.16[8] = {68, 511, 0, 0, 0, 1, 0, 1};

  _gfortran_set_args (argc, argv);
  _gfortran_set_options (8, &options.16[0]);
  p ();
  return 0;
}


